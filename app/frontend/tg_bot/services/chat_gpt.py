from asyncio import exceptions

from app.frontend.clients.chat_gpt import FailEnum
from app.frontend.clients.chat_gpt import GPTApi
from app.frontend.clients.chat_gpt import GPTMessage
from app.frontend.clients.key_manager import gpt_keys_manager
from app.frontend.clients.telegram import TelegramClient
from config import settings


async def get_completion(context: list[GPTMessage]) -> GPTMessage:
    key = gpt_keys_manager.get_key()
    if not key:
        await TelegramClient.bot.send_message(
            chat_id=settings.TELEGRAM_ADMIN,
            text="All the keys are expired!!!",
        )

        return GPTMessage(
            role="function",
            content=(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á–∞—Ç–æ–º —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª—é–¥–µ–π, –ª–∏–º–∏—Ç "
                "–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–µ 5 –º–∏–Ω—É—Ç –∏—Å—á–µ—Ä–ø–∞–Ω üòî. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"
            ),
        )

    client = GPTApi(token=key)

    try:
        completion = await client.get_completion(context=context)
    except exceptions.TimeoutError:
        return GPTMessage(
            role="function",
            content="–ü—Ä–æ—Å—Ç–∏, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º –∏ –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ ü•≤",
        )

    if completion.failed_reason in (FailEnum.key_expired, FailEnum.rate_limit):
        await TelegramClient.bot.send_message(
            chat_id=settings.TELEGRAM_ADMIN,
            text=(
                f"Key expired: {key}, left: {gpt_keys_manager.keys_count()}\n\n"
                f"Current keys: {gpt_keys_manager.get_keys()}"
            ),
        )
        return await get_completion(context=context)

    return GPTMessage(role=completion.role, content=completion.content)

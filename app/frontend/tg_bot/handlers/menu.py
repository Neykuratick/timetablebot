from aiogram import F
from aiogram import Router
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.types import Message

from app.backend.db.models.action import ButtonsEnum
from app.frontend.clients.request_clients import RequestClients
from app.frontend.clients.telegram import TelegramClient
from app.frontend.common.dto.user import User
from app.frontend.singletons import Clients
from app.frontend.tg_bot.keyboards.feedback import get_empty_feedback_keyboard
from app.frontend.tg_bot.keyboards.menu import get_calendar_keyboard
from app.frontend.tg_bot.keyboards.menu import get_detailed_menu
from app.frontend.tg_bot.keyboards.menu import get_menu_keyboard
from app.frontend.tg_bot.keyboards.settings import get_change_group_keyboard
from app.frontend.tg_bot.misc.callbacks import Callback
from app.frontend.tg_bot.misc.callbacks import CallbackActions
from app.frontend.tg_bot.misc.states import FSMStates
from config import settings

initial_router = Router()


@initial_router.message(commands=["start"])
@initial_router.callback_query(Callback.filter(F.action.in_({CallbackActions.menu})))
async def hello_handler(
    message: Message | CallbackQuery,
    current_user: User,
    state: FSMContext,
) -> None:
    if isinstance(message, CallbackQuery):
        await message.answer(settings.TELEGRAM_EMPTY_MESSAGE)
    else:
        await TelegramClient.bot.send_message(
            text=f"–ü—Ä–∏–≤–µ—Ç, {current_user.first_name or current_user.username or '–ê–Ω–æ–Ω'}!",
            chat_id=message.from_user.id,
            reply_markup=get_calendar_keyboard(),
        )

    new_user = current_user.group_number is None

    if new_user:
        answer_message = (
            '–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å "/start", '
            "–∞ –ø–æ—Ç–æ–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. \n\n"
            "–õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá –≤–Ω–∏–∑—É üëá"
        )
        reply_markup = get_change_group_keyboard()
    else:
        answer_message = "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        reply_markup = get_menu_keyboard()

    if isinstance(message, CallbackQuery):
        await TelegramClient.send_message(
            message=message.message,
            text=answer_message,
            reply_markup=reply_markup,
            new_message=False,
        )
    else:
        await TelegramClient.send_message(
            message=message,
            text=answer_message,
            reply_markup=reply_markup,
            new_message=True,
        )

    await RequestClients.tg_backend.mark_action(
        user_id=current_user.id,
        button_name=ButtonsEnum.menu,
    )

    await state.clear()


@initial_router.callback_query(Callback.filter(F.action.in_({CallbackActions.suicide})))
async def delete_message(query: CallbackQuery) -> None:
    await TelegramClient.bot.delete_message(
        message_id=query.message.message_id,
        chat_id=query.from_user.id,
    )
    await query.answer(settings.TELEGRAM_EMPTY_MESSAGE)


@initial_router.callback_query(Callback.filter(F.action.in_({CallbackActions.pattern_search})))
async def pattern_search(query: CallbackQuery, current_user: User, state: FSMContext) -> None:
    greeting = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É. –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ –ø–∞—Ä—ã, "
        "–≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å (—à–∞–±–ª–æ–Ω) \n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –∏–º—è (–∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏) –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ –µ–≥–æ "
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "üëá –ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
    )

    await query.answer(settings.TELEGRAM_EMPTY_MESSAGE)

    await Clients.telegram.send_message(
        message=query.message,
        text=greeting,
        reply_markup=get_empty_feedback_keyboard(
            back=CallbackActions.detailed,
        ),
    )

    await state.set_state(state=FSMStates.pattern_input)
    await RequestClients.tg_backend.mark_action(
        user_id=current_user.id,
        button_name=ButtonsEnum.pattern_mode,
    )


@initial_router.callback_query(Callback.filter(F.action.in_({CallbackActions.detailed})))
async def detailed_search(query: CallbackQuery, current_user: User, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–æ–º"""
    data = await state.get_data()
    pattern = data.get("pattern")
    if not pattern:
        await state.clear()

    if pattern:
        keyboard = get_detailed_menu(pattern=pattern)
        header = f'‚ö†Ô∏è –°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É: "{pattern}"'
    else:
        keyboard = get_detailed_menu()
        header = "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ"

    await query.answer(settings.TELEGRAM_EMPTY_MESSAGE)

    await TelegramClient.send_message(
        message=query.message,
        text=header,
        reply_markup=keyboard,
    )

    await RequestClients.tg_backend.mark_action(
        user_id=current_user.id,
        button_name=ButtonsEnum.detailed_search,
    )


@initial_router.callback_query(Callback.filter(F.action.in_({CallbackActions.stop_pattern_search})))
async def stop_search_pattern(query: CallbackQuery, current_user: User, state: FSMContext) -> None:
    await state.clear()
    await query.answer(settings.TELEGRAM_EMPTY_MESSAGE)
    keyboard = get_detailed_menu()

    await TelegramClient.send_message(
        message=query.message,
        text="–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —Å–±—Ä–æ—à–µ–Ω",
        reply_markup=keyboard,
    )

    await RequestClients.tg_backend.mark_action(
        user_id=current_user.id,
        button_name=ButtonsEnum.detailed_search,
    )

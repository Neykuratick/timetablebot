import json
from datetime import datetime
from vkbottle.bot import Blueprint, Message

from config import settings
from app.backend.users.schemas import UserSchema
from app.vk_bot.blueprints.classes.keyboards import by_day_keyboard
from app.vk_bot.blueprints.classes.services import send_classes
from app.vk_bot.blueprints.classes.rules import (
    TodayClassesRule,
    TomorrowClassesRule,
    LegacySearchRule,
    DownVoteRule,
    UpVoteRule,
    DaySelectionRule,
    ByDayRule, LegacySearchBlockRule
)
from app.vk_bot.defaults import DEFAULT_ANSWER_MESSAGE

classes_bp = Blueprint()


@classes_bp.on.message(TodayClassesRule())
async def today_classes_filter(message: Message, user: UserSchema):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è """

    week_day_index = datetime.today().isocalendar().weekday - 1

    await send_classes(message, user, week_day_index)


@classes_bp.on.message(TomorrowClassesRule())
async def tomorrow_classes_filter(message: Message, user: UserSchema):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ """

    week_day_index = datetime.today().isocalendar().weekday

    await send_classes(message, user, week_day_index)


@classes_bp.on.message(ByDayRule())
async def find_by_day(message: Message, user: UserSchema):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–Ω—é –Ω–µ–¥–µ–ª–∏ """

    payload = json.loads(message.payload)
    week_day_index = payload.get('day')
    next_week = payload.get('next')

    await send_classes(message, user, week_day_index, next_week)


@classes_bp.on.message(DaySelectionRule())
async def day_selection(message: Message):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è """

    payload = json.loads(message.payload)
    next_week = payload.get('next')
    await message.answer(keyboard=by_day_keyboard(next_week), message=DEFAULT_ANSWER_MESSAGE)


@classes_bp.on.message(DownVoteRule())
async def downvote(message: Message, user):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–∞—Ä–µ """

    text = (
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user.vk_id}\n\n'
        f'–ü—Ä–∏—à–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä—ã:\n\n'
        f'{message.payload}'
    )
    await message.ctx_api.messages.send(peer_ids=settings.ADMIN_VK_IDS, random_id=0, message=text)
    await message.answer("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—á—Ç–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ üíñ")


@classes_bp.on.message(UpVoteRule())
async def upvote(message: Message):
    """ –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Å—ã–ª–∞–µ—Ç —Ñ–∏–¥–±–µ–∫ —é–∑–≤–µ—Ä—É """

    await message.answer("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—á—Ç–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ üíñ")


@classes_bp.on.message(LegacySearchRule())
async def legacy_search(message: Message):
    """ –ò—â–µ—Ç –ø–∞—Ä—ã –ø–æ —Ç–æ–º—É –∂–µ —Å–∞–º–æ–º—É –¥–Ω—é —Å—Ç–∞—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º """

    text = "–°—Ç–∞—Ä—ã–π –ø–æ–∏—Å–∫ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è :)"

    await message.answer(text)


@classes_bp.on.message(LegacySearchBlockRule())
async def legacy_search_block(message: Message):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ incompatible error """

    await message.answer('–ö–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –ù–∞–ø–∏—à–∏ "—Å—Ç–∞—Ä—Ç" –∏–ª–∏ –Ω–∞–∂–º–∏ "–í –º–µ–Ω—é"')
